---
- name: verify if project exists
  stat: path="{{ inventory_dir }}/group_vars/{{ RANCHER_PROJECT_NAME }}"
  register: project_file
  delegate_to: localhost

- name: create project
  uri:
    method: POST
    url: "http://{{ RANCHER_MASTER_URL }}:{{ RANCHER_MASTER_PORT }}/v1/projects"
    user: "{{ RANCHER_API_KEY_ACCOUNT_TOKEN }}"
    password: "{{ RANCHER_API_KEY_ACCOUNT_SECRET }}"
    body: ' {"description":"{{ RANCHER_PROJECT_NAME }}", "name":"{{ RANCHER_PROJECT_NAME }}", "allowSystemRole":false, "members":[], "swarm":false, "kubernetes":false, "mesos":false, "virtualMachine":false, "publicDns":false, "servicesPortRange":null}'
    body_format: json
    status_code: 201
  register: project_resp
  when: project_file.stat.exists == false

- name: register project id
  set_fact:
    RANCHER_PROJECT_ID: "{{ project_resp.json['id'] }}"
  when: project_file.stat.exists == false

- name: create project apikey
  uri:
    method: POST
    url: "http://{{ RANCHER_MASTER_URL }}:{{ RANCHER_MASTER_PORT }}/v1/apikeys"
    user: "{{ RANCHER_API_KEY_ACCOUNT_TOKEN }}"
    password: "{{ RANCHER_API_KEY_ACCOUNT_SECRET }}"
    body: ' {"accountId":"{{ RANCHER_PROJECT_ID }}", "name":"{{ RANCHER_PROJECT_NAME }}_key"}'
    Hbody_format: json
    status_code: 201
  register: project_apikey
  when: project_file.stat.exists == False

- name: generate project configuration
  template:  src=files/rancher_project_key.j2 dest={{ inventory_dir }}/group_vars/{{ RANCHER_PROJECT_NAME }}
  when: project_file.stat.exists == False
  delegate_to: localhost
